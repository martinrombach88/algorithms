
My solution - copying the whole array rather than swapping elements within the loop -> 
triggering automatic code from IntelliJ
0 upvotes
Martin · Lecture 127 · 22 hours ago
I seem to have replaced the original array with a copy and accidentally triggered some intellisense. When I attempted to make the second for loop, (which works), IntelliJ flagged it and gave me a quick way of replacing array with a copy of reverseArray. When I did the sorting challenge, I used this reverse method to return the min value (min value = reversedArray[0]). I tried to reuse the code here.

I tried to replace it with copyOf, but I wasn't able to. Curious if anyone knows how.


 public static void reverseArray(int[] array) {        
        int[] reverseArray = new int[array.length];        
        int counter = 0;         
 
        for (int i = array.length-1; i >= 0; i--) {            
            reverseArray[counter] = array[i];            
            counter++;        
        }                
 
        //My code for making a copy with a for loop.        
//        for (int i = 0; i < array.length; i++) {        
//            array[i] = reverseArray[i];        
//        }        
        //IntelliJ's copying solution.        
        System.arraycopy(reverseArray, 0, array, 0, array.length);   
}
2 replies

Eddie
Answer
1 upvote
21 hours ago
FYI, System.arraycopy() is useful when you want to copy parts of another array where you define destination position.  See this link for what I'm talking about where you copy parts of an array.  https://www.tutorialspoint.com/java/lang/system_arraycopy.htm

You could useSystem.arraycopy()  to copy the entire array like you did, but there are simpler ways, like what you inquire about .copyOf().  See below on how to use .copyOf(), but I would go with cloning since it's more concise and readable.  Not sure why Intellisense didn't suggest .clone() instead, I guess it's not that intelligent.



// make sure you import java.util.Arrays; in order to print
 
int[] array = new int[] { 1, 2, 3, 4, 5 };
System.out.println(Arrays.toString(array)); // [1, 2, 3, 4, 5]
 
int[] copy = Arrays.copyOf(array, array.length);
System.out.println(Arrays.toString(copy));  // [1, 2, 3, 4, 5]
 
int[] clone = array.clone();
System.out.println(Arrays.toString(clone));  // [1, 2, 3, 4, 5]


BTW, all of this copy/cloning is fun and games, but I hope you aren't missing the point about swapping elements of an existing array...which is that the lesson is on reference type (as oppose to value type).  Don't focus so much on the "output" but the process of what Tim's teaching...which is an important concept.  Thus, you WANT to swap elements on an existing array and not what you are playing around with, which is creating another reference type variable where the reference address of where it is stored in the memory is different.



https://www.udemy.com/course/java-the-complete-java-developer-course/learn/quiz/5088054#questions/13519394


Martin
0 upvotes
A few seconds ago
"The lesson is on reference type (as oppose to value type). Thus, you WANT to swap elements on an existing array and not what you are playing around with, which is creating another reference type variable where the reference address of where it is stored in the memory is different."



When you wrote on Adrian's post, you had the same point. When I first saw Tim's solution, I thought 'this is a really complicated way of doing it, why not just copy the array?' You've really helped me understand why. I feel like I should review this. Thanks Eddie!