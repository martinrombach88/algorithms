Welcome to the Interface Challenge.

In this challenge, we'll be working on creating some mappable output.
In the past decade or so, maps have become part of so many applications.
Everything it seems can be described on a map, and you may need to provide
this support for existing classes. Most things, when drawn on a map,
fall into three categories, a point, a line, or a polygon or geometric shape.

The result of your code will be text that could be printed out to a file,
for exchanging data with a mapping application. One such file is a specially formatted file,
called geojson, which is a JSON file extended for geographical elements.
You don't have to know JSON or geojson to be successful at this challenge.
For this challenge, you'll simply create a String for every feature that will be mapped.

An example of such a String is shown on this slide.
Notice that data is represented in name-value pairs.
The property name, and its corresponding value is separated by a colon.
Pairs are separated by commas. Values can be String values or a list of values.
You can see that here, where properties is the name,
and the values is a nested list of name value pairs in curly brackets

Your challenge is to first, Create a Mappable Interface.
The interface should force classes to implement three methods.
One method should return a label (how the item will be described on the map).
One should return a geometry type (POINT or LINE) which is what the type will look like on the map.
The last should return an icon type (sometimes called a map marker), this could be a black push
pin for a point of interest, or a red solid line for a highway for example.

In addition to the three methods described, the interface should also include:
a constant String value called JSON_PROPERTY, which is equal to: "properties":{%s}.
A hint here, using a text block will help maintain quotation marks in your output.
Include a default method called toJSON() that prints out the type, label, and marker.
I'll show examples shortly. This interface should also have a static method, that takes a Mappable
instance as an argument. This method should print out the properties for each mappable type,
including those mentioned above, but also any other fields on the business classes.

You'll also want to create two classes that implement this interface, these
can be anything you want, but the examples I'll use are a Building and UtilityLine.
One class, in my case the Building,
should have a geometry type of POINT, and One class should have a geometry type of Line.
The UtilityLine class will be my example for a class that will be a LINE on a map.
When these items are mapped, The Building will be shown on a city map,
as a point with the icon and label specified, and the Utility Line will be a line on the map.

We aren't actually going to map it, we'd need quite a bit more time for that, but we'll have
some of the data elements that a mapping system would need, and in one format that it could use.
Your final output should look something like I show on this slide.
You should output the geometry type, the icon information, and the label.
Here is an example for a building, including type, label, and marker, but also the building
name and usage, which are fields on building.
And here is an example for a fiber optic Utility line, so a LINE, a green dotted line, would get
drawn for a fiber optic cable on College Street.

You can see that the properties are a comma-delimited list, in curly braces,
with the property or field name in quotes, then a colon,
followed by the property value or field value, and that's also in double quotes.
Ok, so go and see what you can do, and again, make sure you have some fun with this.
Maybe you want to map towns and roads, or parks and rivers.
Just make sure one class could be a point on your map, and one could be a line.
We covered a lot of material, and this is a chance to explore and experiment with some of it.

If you get stuck, and want to first look at my design, as a class diagram before
starting, you can see this on the next slide. After that, if you want to see how I'd code it,
come back and we'll go through it together. Pause the video now and give that a go.